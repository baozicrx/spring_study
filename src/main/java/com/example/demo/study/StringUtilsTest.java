package com.example.demo.study;

import java.util.Arrays;

import org.apache.commons.lang3.StringUtils;

/**
 * @Description: StringUtils工具类笔记
 * @Author: crx
 * @Create: 10:00 2020/8/19
 */
public class StringUtilsTest {
    public static void main(String[] args) {
        System.out.println("EMPTY初始化空的字符串");
        System.out.println("(1):" + StringUtils.EMPTY);
        System.out.println("isEmpty()查CharSequence是否为空（“”）或null");
        System.out.println("(1):" + StringUtils.isEmpty(null));
        System.out.println("(2):" + StringUtils.isEmpty(""));
        System.out.println("(3):" + StringUtils.isEmpty(" "));
        System.out.println("(4):" + StringUtils.isEmpty("bob"));
        System.out.println("(5):" + StringUtils.isEmpty("  bob  "));
        System.out.println("isBlank()检查CharSequence是否为空（“”），仅null或空白");
        System.out.println("(1):" + StringUtils.isBlank(null));
        System.out.println("(2):" + StringUtils.isBlank(""));
        System.out.println("(3):" + StringUtils.isBlank(" "));
        System.out.println("(4):" + StringUtils.isBlank("bob"));
        System.out.println("(5):" + StringUtils.isBlank("  bob  "));
        System.out.println("trim()从该字符串的两个末端删除控制字符（char <= 32）");
        System.out.println("(1):" + StringUtils.trim(null));
        System.out.println("(2):" + StringUtils.trim(""));
        System.out.println("(3):" + StringUtils.trim("     "));
        System.out.println("(4):" + StringUtils.trim("ab c"));
        System.out.println("(5):" + StringUtils.trim("    abc    "));
        System.out.println("truncate()截断字符串");
        System.out.println("(1):" + StringUtils.truncate(null, 0));
        System.out.println("(2):" + StringUtils.truncate(null, 2));
        System.out.println("(3):" + StringUtils.truncate("", 4));
        System.out.println("(4):" + StringUtils.truncate("abcdefg", 4));
        System.out.println("(5):" + StringUtils.truncate("abcdefg", 6));
        System.out.println("(6):" + StringUtils.truncate("abcdefg", 7));
        System.out.println("(7):" + StringUtils.truncate("abcdefg", 8));
//      StringUtils.truncate("abcdefg", -1) = throws an IllegalArgumentException
        System.out.println("strip()从字符串的开头和结尾去除空格");
        System.out.println("(1):" + StringUtils.strip(null));
        System.out.println("(2):" + StringUtils.strip(""));
        System.out.println("(3):" + StringUtils.strip("   "));
        System.out.println("(4):" + StringUtils.strip("abc"));
        System.out.println("(5):" + StringUtils.strip("  abc"));
        System.out.println("(6):" + StringUtils.strip("abc  "));
        System.out.println("(7):" + StringUtils.strip(" abc "));
        System.out.println("(8):" + StringUtils.strip(" ab c "));
        System.out.println("equals()比较两个CharSequences，如果它们表示个相等的字符序列,返回true");
        System.out.println("(1):" + StringUtils.equals(null, null));
        System.out.println("(2):" + StringUtils.equals(null, "abc"));
        System.out.println("(3):" + StringUtils.equals("abc", null));
        System.out.println("(4):" + StringUtils.equals("abc", "abc"));
        System.out.println("(5):" + StringUtils.equals("abc", "ABC"));
        System.out.println("compare()按字典顺序比较两个字符串");
        System.out.println("(1):" + StringUtils.compare(null, null));
        System.out.println("(2):" + StringUtils.compare(null, "a"));
        System.out.println("(3):" + StringUtils.compare("a", null));
        System.out.println("(4):" + StringUtils.compare("abc", "abc"));
        System.out.println("(5):" + StringUtils.compare("a", "b"));
        System.out.println("(6):" + StringUtils.compare("b", "a"));
        System.out.println("(7):" + StringUtils.compare("a", "B"));
        System.out.println("(8):" + StringUtils.compare("ab", "abc"));
        System.out.println("equalsAny()比较给定的string和searchStrings的CharSequences变量，如果string等于任意CharSequences，则返回true");
        System.out.println("(1):" + StringUtils.equalsAny(null, (CharSequence[]) null));
        System.out.println("(2):" + StringUtils.equalsAny(null, null, null));
        System.out.println("(3):" + StringUtils.equalsAny(null, "abc", "def"));
        System.out.println("(4):" + StringUtils.equalsAny("abc", null, "def"));
        System.out.println("(5):" + StringUtils.equalsAny("abc", "abc", "def"));
        System.out.println("(6):" + StringUtils.equalsAny("abc", "ABC", "DEF"));
        System.out.println("indexOf()返回第一次出现指定字符的seq内的索引");
        System.out.println("(1):" + StringUtils.indexOf(null, ""));
        System.out.println("(2):" + StringUtils.indexOf("", ""));
        System.out.println("(3):" + StringUtils.indexOf("aabaabaa", 'a'));
        System.out.println("(4):" + StringUtils.indexOf("aabaabaa", 'b'));
        System.out.println("contains()检查CharSequence是否包含搜索字符");
        System.out.println("(1):" + StringUtils.contains(null, ""));
        System.out.println("(2):" + StringUtils.contains("", ""));
        System.out.println("(3):" + StringUtils.contains("abc", 'a'));
        System.out.println("(4):" + StringUtils.contains("abc", 'z'));
        System.out.println("substring()从指定的String获取一个子字符串，避免出现异常");
        System.out.println("(1):" + StringUtils.substring(null, 0));
        System.out.println("(2):" + StringUtils.substring("", 0));
        System.out.println("(3):" + StringUtils.substring("abc", 0));
        System.out.println("(4):" + StringUtils.substring("abc", 2));
        System.out.println("(5):" + StringUtils.substring("abc", 4));
        System.out.println("(6):" + StringUtils.substring("abc", -2));
        System.out.println("(7):" + StringUtils.substring("abc", -4));
        System.out.println("split()使用空格作为分隔符，将提供的文本拆分为一个数组");
        System.out.println("(1):" + Arrays.toString(StringUtils.split(null)));
        System.out.println("(2):" + Arrays.toString(StringUtils.split("")));
        System.out.println("(3):" + Arrays.toString(StringUtils.split("abc def")));
        System.out.println("(4):" + Arrays.toString(StringUtils.split("abc  def")));
        System.out.println("(5):" + Arrays.toString(StringUtils.split(" abc ")));
        System.out.println("join()将提供的数组的元素连接到单个String *中，其中包含提供的元素列表");
        System.out.println("(1):" + StringUtils.join(new String[]{"a", "b", "c"}, ';'));
        System.out.println("(2):" + StringUtils.join(new String[]{"a", "b", "c"}, null));
        System.out.println("(3):" + StringUtils.join(new String[]{null, "", "a"}, ';'));
        System.out.println("deleteWhitespace()从字符串中删除所有空格");
        System.out.println("(1):" + StringUtils.deleteWhitespace(null));
        System.out.println("(2):" + StringUtils.deleteWhitespace(""));
        System.out.println("(3):" + StringUtils.deleteWhitespace("abc"));
        System.out.println("(4):" + StringUtils.deleteWhitespace("   ab  c  "));
        System.out.println("remove()从源字符串中删除所有出现的子字符串");
        System.out.println("(1):" + StringUtils.remove(null, ""));
        System.out.println("(2):" + StringUtils.remove("", null));
        System.out.println("(3):" + StringUtils.remove("queued", "ue"));
        System.out.println("(4):" + StringUtils.remove("queued", "zz"));
        System.out.println("replace()替换另一个字符串中所有出现的字符串");
        System.out.println("(1):" + StringUtils.replace("aba", "a", null));
        System.out.println("(2):" + StringUtils.replace("aba", "a", ""));
        System.out.println("(3):" + StringUtils.replace("aba", "a", "z"));
        System.out.println("repeat()重复一个字符串多次以形成一个新的字符串");
        System.out.println("(1):" + StringUtils.repeat(null, 2));
        System.out.println("(2):" + StringUtils.repeat("", 0));
        System.out.println("(3):" + StringUtils.repeat("", 2));
        System.out.println("(4):" + StringUtils.repeat("a", 3));
        System.out.println("(5):" + StringUtils.repeat("ab", 2));
        System.out.println("(6):" + StringUtils.repeat("a", -2));
        System.out.println("upperCase()将字符串转换为大写");
        System.out.println("(1):" + StringUtils.upperCase(null));
        System.out.println("(2):" + StringUtils.upperCase(""));
        System.out.println("(3):" + StringUtils.upperCase("aBc"));
        System.out.println("countMatches()计算子字符串出现在较大字符串中的次数");
        System.out.println("(1):" + StringUtils.countMatches(null, ""));
        System.out.println("(2):" + StringUtils.countMatches("", ""));
        System.out.println("(3):" + StringUtils.countMatches("abba", null));
        System.out.println("(4):" + StringUtils.countMatches("abba", ""));
        System.out.println("(5):" + StringUtils.countMatches("abba", "a"));
        System.out.println("(6):" + StringUtils.countMatches("abba", "ab"));
        System.out.println("(7):" + StringUtils.countMatches("abba", "xxx"));
        System.out.println("reverse()反转字符串");
        System.out.println("(1):" + StringUtils.reverse(null));
        System.out.println("(2):" + StringUtils.reverse(""));
        System.out.println("(3):" + StringUtils.reverse("bat"));
        System.out.println("wrap()用字符包装字符串");
        System.out.println("(1):" + StringUtils.wrap(null, ""));
        System.out.println("(2):" + StringUtils.wrap("", ""));
        System.out.println("(3):" + StringUtils.wrap("ab", '\0'));
        System.out.println("(4):" + StringUtils.wrap("ab", 'x'));
        System.out.println("(5):" + StringUtils.wrap("ab", '\''));
        System.out.println("(6):" + StringUtils.wrap("\"ab\"", '\"'));
        System.out.println("startsWith()检查CharSequence是否以指定的前缀开头");
        System.out.println("(1):" + StringUtils.startsWith(null, null));
        System.out.println("(2):" + StringUtils.startsWith(null, "abc"));
        System.out.println("(3):" + StringUtils.startsWith("abcdef", null));
        System.out.println("(4):" + StringUtils.startsWith("abcdef", "abc"));
        System.out.println("(5):" + StringUtils.startsWith("ABCDEF", "abc"));
    }
}
